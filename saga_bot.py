import os
import time
import logging
from pathlib import Path
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup
from telegram import Bot
from telegram.error import TelegramError

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env ---
load_dotenv()
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
INTERVAL = int(os.getenv('CHECK_INTERVAL', 60))
SAGA_URL = os.getenv('SAGA_URL')

# --- –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º–∏ ID –æ–≥–æ–ª–æ—à–µ–Ω—å ---
BASE_DIR = Path(__file__).parent
KNOWN_OFFERS_PATH = BASE_DIR / 'known_offers.txt'

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram-–±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)

# --- –ó—á–∏—Ç—É—î —Ä–∞–Ω—ñ—à–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ ID –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ —Ñ–∞–π–ª—É ---
def load_known_offers():
    if not KNOWN_OFFERS_PATH.exists():
        return set()
    with open(KNOWN_OFFERS_PATH, 'r') as f:
        return set(line.strip() for line in f if line.strip())


# --- –ó–±–µ—Ä—ñ–≥–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ ID –æ–≥–æ–ª–æ—à–µ–Ω—å —É —Ñ–∞–π–ª ---
def save_known_offers(offers):
    with open(KNOWN_OFFERS_PATH, 'w') as f:
        for offer_id in sorted(offers):
            f.write(f"{offer_id}\n")


# --- –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å —ñ–∑ —Å–∞–π—Ç—É SAGA ---
def fetch_offers():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'
    }
    response = requests.get(SAGA_URL, headers=headers, timeout=10)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, 'html.parser')

    offers = {}
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å
    for a in soup.find_all('a', href=True):
        href = a['href']
        if '/immobiliensuche/immo-detail/' in href:
            # –í–∏—Ç—è–≥—É—î–º–æ ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
            parts = href.strip('/').split('/')
            # –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å ID, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '4981'
            offer_id = parts[-2]
            full_url = f"https://www.saga.hamburg{href}"
            # –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–æ—á–Ω—ñ—à–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É)
            title = a.get_text(strip=True)
            offers[offer_id] = {
                'url': full_url,
                'title': title or '–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'
            }
    return offers


# --- –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ---
def notify_new_offers(new_offers):
    for offer_id, data in new_offers.items():
        text = f"üè† *{data['title']}*\n{data['url']}"
        try:
            bot.send_message(
                chat_id=CHAT_ID,
                text=text,
                parse_mode='Markdown'
            )
            logger.info(f"Sent: {offer_id} | {data['url']}")
        except TelegramError as e:
            logger.error(f"Failed to send {offer_id}: {e}")


# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä—É–≤–∞–Ω–Ω—è ---
def main():
    logger.info('Starting SAGA Hamburg monitor...')
    seen = load_known_offers()
    logger.info(f'Loaded {len(seen)} known offers.')

    while True:
        try:
            offers = fetch_offers()
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
            new_offers = {oid: info for oid, info in offers.items() if oid not in seen}
            if new_offers:
                notify_new_offers(new_offers)
                seen.update(new_offers)
                save_known_offers(seen)
            else:
                logger.info('No new offers found.')
        except Exception as e:
            logger.exception(f"Error during monitoring: {e}")
        # –û—á—ñ–∫—É—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        time.sleep(INTERVAL)


if __name__ == '__main__':
    main()